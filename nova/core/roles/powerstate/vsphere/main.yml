---
- name: Delegating all powerstate tasks to localhost...
  delegate_to: localhost
  become: false
  block:
    - name: Looking up the {{ custom_vm_name | default(vm_name) }} VM...
      vmware.vmware.guest_info:
        guest_name: "{{ custom_vm_name | default(vm_name) }}"
      register: powerstate_vcenter_vm_info

    - name: ERROR
      ansible.builtin.fail:
        msg: "{{ custom_vm_name | default(vm_name) }} VM not found!"
      when: powerstate_vcenter_vm_info.guests == []

    - name: Waiting until VMTools are running on {{ custom_vm_name | default(vm_name) }}...
      vmware.vmware.guest_info:
        guest_name: "{{ custom_vm_name | default(vm_name) }}"
      register: vm_tools
      until: vm_tools.guests[0].guest_tools_status | default(false) == "guestToolsRunning"
      retries: "{{ (powerstate_agent_info_timeout if powerstate_agent_info_timeout >= 5 else 5) // 5 }}"
      delay: 5
      when:
        - powerstate_vcenter_vm_info.guests[0].hw_power_status != "poweredOff"
        - powerstate_vcenter_vm_info.guests[0].hw_power_status != "suspended"
        - not reset and not poweroff
        - shutdown and powerstate_vcenter_vm_info.guests[0].hw_power_status != "poweredOff"

    - name: Including {{ custom_vm_name | default(vm_name) }} poweroff tasks...
      ansible.builtin.include_tasks: poweroff.yml
      when: poweroff | bool

    - name: Including {{ custom_vm_name | default(vm_name) }} poweron tasks...
      ansible.builtin.include_tasks: poweron.yml
      when: poweron | bool

    - name: Including {{ custom_vm_name | default(vm_name) }} reset tasks...
      ansible.builtin.include_tasks: reset.yml
      when: reset | bool

    - name: Including {{ custom_vm_name | default(vm_name) }} restart tasks...
      ansible.builtin.include_tasks: restart.yml
      when: restart | bool

    - name: Including {{ custom_vm_name | default(vm_name) }} suspend tasks...
      ansible.builtin.include_tasks: suspend.yml
      when: suspend | bool

    - name: Including {{ custom_vm_name | default(vm_name) }} shutdown tasks...
      ansible.builtin.include_tasks: shutdown.yml
      when: shutdown | bool
