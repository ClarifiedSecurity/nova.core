---
- name: Setting fresh_deploy fact...
  ansible.builtin.set_fact:
    fresh_deploy: true
  when: vcenter_vm_info.guests == [] or deploy_mode == "redeploy"

- name: Checking for the correct deploy mode...
  ansible.builtin.fail:
    msg: |
      Virtual Machine {{ custom_vm_name | default(vm_name) }} doesn't exist, use the deploy command first!
  when:
    - fresh_deploy is ansible.builtin.truthy
    - role_only is ansible.builtin.truthy
      or role_only_wp is ansible.builtin.truthy
      or single_role is defined

- name: Running VM creation tasks...
  delegate_to: localhost
  become: false
  when:
    - fresh_deploy
    - not manual_fresh_deploy # Since this block can only be ran once during clone
  block:
    - name: Checking for Network...
      ansible.builtin.fail:
        msg: |
          Missing networking configuration for {{ inventory_hostname }}!
          Check that you have the following configuration set:
            * {{ inventory_hostname }} machine has at least network interface defined
            * {{ inventory_hostname }} machine interface has the connection flag set to true
      when: connection_network_info == []

    - name: Checking that nothing is already responding on {{ connection_address }}...
      ansible.builtin.command: ping -q -c 2 -W 2 {{ connection_address }}
      register: res
      failed_when: not (('0 received' in res.stdout) or ('0 packets received' in res.stdout))
      changed_when: false
      # The list of connection modes are the ones that are available in Providentia
      when: connection_mode not in ['ipv4_dhcp', 'ipv6_dhcp', 'ipv6_slaac']

    - name: Missing Operating System...
      ansible.builtin.fail:
        msg: Cannot find vm_template or base_vm_template variable! Did define the Operating System in the inventory?
      when:
        - vm_template is not defined
        - base_vm_template is not defined

    - name: Looking up template from Content Library...
      when: machine_operations_vsphere_content_library_name != {}
      block:
        - name: Getting {{ vm_template }} info from content library...
          vmware.vmware.content_library_item_info:
            library_name: "{{ machine_operations_vsphere_content_library_name }}"
            library_item_name: "{{ vm_template }}"
          register: vm_template_info

        - name: MISSING TEMPLATE IN CONTENT LIBRARY...
          ansible.builtin.fail:
            msg: |
              Cannot find the template in the content library!
              Template name: {{ vm_template }}
              Content library name: {{ machine_operations_vsphere_content_library_name }}
          when: vm_template_info.library_item_info == []

        - name: Cloning {{ custom_vm_name | default(vm_name) }} VM from content library...
          vmware.vmware.deploy_content_library_template:
            cluster: "{{ cluster }}"
            datacenter: "{{ datacenter }}"
            datastore: "{{ datastore }}"
            library_item_name: "{{ vm_template }}"
            library_name: "{{ machine_operations_vsphere_content_library_name }}"
            vm_folder: "{{ folder }}"
            vm_name: "{{ custom_vm_name | default(vm_name) }}"

    - name: Looking up template from exiting VMs...
      when: machine_operations_vsphere_content_library_name == {}
      block:
        - name: Getting {{ custom_vm_name | default(vm_name) }} VM CPU & RAM info...
          vmware.vmware.guest_info:
            name: "{{ vm_template if not template else base_vm_template }}"
          register: template_search_result

        - name: Missing VM template...
          ansible.builtin.fail:
            msg: Cannot find template - {{ vm_template if not template else base_vm_template }}
          when: template_search_result.guests == []

        - name: Getting VM template disk info...
          community.vmware.vmware_guest_disk_info:
            datacenter: "{{ datacenter }}"
            moid: "{{ template_search_result.guests[0].moid }}"
          register: template_disk_info

        - name: Getting template OS disk size...
          ansible.builtin.set_fact:
            template_disk_size: "{{ (template_disk_info.guest_disk_info | dict2items | first).value.capacity_in_kb // 1024 | int }}"

    # This task can be removed when local inventories are moved to Providentia
    - name: Setting OS disk size...
      ansible.builtin.set_fact:
        os_disk_size: "{{ os_disk_size_gb * 1024 }}"
      when:
        - os_disk_size_gb is defined
        - hardware_primary_disk_size is not defined

    - name: Setting OS disk size...
      ansible.builtin.set_fact:
        os_disk_size: "{{ hardware_primary_disk_size * 1024 }}"
      when: hardware_primary_disk_size is defined

    # This is only done for non-content library templates since content library templates do not report the actual disk size
    - name: Checking for template compatibility when template disk size is defined...
      when: template_disk_size is defined
      block:
        - name: Setting OS disk size...
          ansible.builtin.set_fact:
            os_disk_size: "{{ template_disk_size }}"
          when:
            - os_disk_size_gb is not defined
            - hardware_primary_disk_size is not defined

        - name: ERROR...
          ansible.builtin.debug:
            msg: Your OS disk size {{ os_disk_size }}MB cannot be smaller than the template {{ template_disk_size }}MB!
          when: template_disk_size | int > os_disk_size | int
          failed_when: template_disk_size | int > os_disk_size | int

        - name: Checking if linked clone is possible...
          when:
            - linked_clone_status
            - template_disk_size | int < os_disk_size | int
          block:
            - name: Info...
              ansible.builtin.debug:
                msg: |
                  Your OS disk size {{ os_disk_size }}MB is bigger than the template {{ template_disk_size }}MB.
                  Disabling linked clone.

            - name: Disabling linked clone...
              ansible.builtin.set_fact:
                linked_clone_status: false

    - name: Getting the time...
      ansible.builtin.setup:
        filter: "*_time"

    - name: Cloning {{ custom_vm_name | default(vm_name) }} VM...
      community.vmware.vmware_guest:
        datacenter: "{{ datacenter }}"
        name: "{{ custom_vm_name | default(vm_name) }}"
        template: "{{ omit if machine_operations_vsphere_content_library_name != {} else base_vm_template if template else vm_template }}"
        folder: "{{ folder }}"
        state: "{{ 'poweredoff' if fresh_deploy else 'present' }}"
        esxi_hostname: "{{ omit if not machine_operations_esxi_hostname else machine_operations_esxi_hostname }}"
        cluster: "{{ omit if machine_operations_esxi_hostname else cluster }}"
        datastore: "{{ datastore }}"
        resource_pool: "{{ resource_pool | default(omit) }}"
        hardware:
          num_cpus: "{{ omit if not hardware_cpu else hardware_cpu }}"
          num_cpu_cores_per_socket: "{{ omit if not hardware_cpu else hardware_cpu }}"
          memory_mb: "{{ omit if not hardware_ram else (hardware_ram * 1024) }}"
          memory_reservation_lock: false
          mem_reservation: 0
        cdrom: "{{ machine_operations_vsphere_cdrom_config }}"
        disk: "{{ omit if os_disk_size is not defined else machine_operations_vsphere_disk_config }}"
        advanced_settings:
          - key: isolation.tools.copy.disable
            value: "FALSE"
          - key: isolation.tools.paste.disable
            value: "FALSE"
          - key: isolation.tools.setGUIOptions.enable
            value: "TRUE"
        linked_clone: "{{ false if machine_operations_vsphere_content_library_name != {} else linked_clone_status }}"
        snapshot_src: "{{ linked_clone_snapshot_name if linked_clone_status and machine_operations_vsphere_content_library_name == {} else omit }}"
        annotation: "{{ template_description if template else vm_description }}"
        vapp_properties: "{{ vapp_options }}"
      register: cloned_vmware_vm

    - name: Increasing video memory
      community.vmware.vmware_guest_video:
        name: "{{ custom_vm_name | default(vm_name) }}"
        folder: "{{ folder }}"
        datacenter: "{{ datacenter }}"
        video_memory_mb: "{{ machine_operations_vsphere_video_memory }}"
        enable_3D: "{{ machine_operations_vsphere_video_3d }}"
        memory_3D_mb: "{{ machine_operations_vsphere_video_3d_memory if machine_operations_vsphere_video_3d else omit }}"
        renderer_3D: "{{ 'automatic' if machine_operations_vsphere_video_3d else omit }}"
        use_auto_detect: false
      when: machine_operations_vsphere_increase_video_memory

    - name: Add vGPU profile to VM...
      community.vmware.vmware_guest_vgpu:
        cluster: "{{ cluster }}"
        datacenter: "{{ datacenter }}"
        name: "{{ custom_vm_name | default(vm_name) }}"
        vgpu: "{{ machine_operations_vgpu }}"
      when: machine_operations_vgpu != none

# Using a separate block for attaching network interfaces since
# community.vmware.vmware_guest automatically triggers customization if networks key is used
- name: Connecting network interfaces and starting VM...
  delegate_to: localhost
  become: false
  when:
    - role_only is ansible.builtin.falsy
    - role_only_wp is ansible.builtin.falsy
    - single_role is not defined
  block:
    - name: Getting {{ custom_vm_name | default(vm_name) }} interfaces...
      community.vmware.vmware_guest_info:
        datacenter: "{{ datacenter }}"
        name: "{{ custom_vm_name | default(vm_name) }}"
      register: existing_vm_info

    - name: Creating a list of existing network interfaces...
      ansible.builtin.set_fact:
        existing_interfaces: "{{ existing_vm_info.instance | dict2items | selectattr('key', 'match', '^hw_eth[0-9]+$') | list }}"

    # If the number of existing interfaces is different than the desired interfaces after initial deploy then remove all existing interfaces and re-add them
    - name: Removing existing network interfaces from {{ custom_vm_name | default(vm_name) }}...
      community.vmware.vmware_guest_network:
        datacenter: "{{ datacenter }}"
        name: "{{ custom_vm_name | default(vm_name) }}"
        state: absent
        mac_address: "{{ item.value.macaddress }}"
      loop: "{{ existing_interfaces }}"
      loop_control:
        label: "{{ item.value.label }}"
      when:
        - not fresh_deploy
        - existing_interfaces | length != interfaces | length

    - name: Attaching following network interfaces to {{ custom_vm_name | default(vm_name) }}...
      community.vmware.vmware_guest_network:
        datacenter: "{{ datacenter }}"
        name: "{{ custom_vm_name | default(vm_name) }}"
        state: present
        force: true
        network_name: "{{ item.cloud_id }}"
        device_type: "{{ machine_operations_vsphere_nic_type | default('vmxnet3') }}"
        mac_address: "{{ existing_interfaces[idx].value.macaddress | default(omit) }}"
      loop: "{{ interfaces }}"
      loop_control:
        label: "{{ item.cloud_id }}"
        index_var: idx

- name: Including nova.core.powerstate role...
  ansible.builtin.include_role:
    name: nova.core.powerstate
  vars:
    poweron: true
